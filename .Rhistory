occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- 100
k <- 5
for(j in 1:length_test)
{
temp <- occupancy_test_f$Temperature[j]
hum  <- occupancy_test_f$Humidity[j]
lit  <- occupancy_test_f$Light[j]
co2  <- occupancy_test_f$CO2[j]
length <- nrow(occupancy_test_f)
occupancy_test_f$euclidean_distance <- NA
for(i in 1:length)
{
occupancy_test_f$euclidean_distance[i] = sqrt(
(occupancy_test_f$Temperature[i]-temp)^2 +
(occupancy_test_f$Humidity[i]-hum)^2 +
(occupancy_test_f$Light[i]-lit)^2 +
(occupancy_test_f$CO2[i]-co2)^2
)
}
occupancy_test_f<- occupancy_test_f[order(occupancy_test_f$euclidean_distance),]
#if occupancy was set
Class1 <- sum(occupancy_test_f$Occupancy[1:k]==1)
if(Class1>k/2)
{
print("The query point belongs to class 1")
print(j)
occupancy_test_f$knn_result[j] <- 1
}
else
{
print("The query belongs to class 0")
print(j)
occupancy_test_f$knn_result[j]<- 0
}
}
correct <- 0
for (l in 1 length_test)
{
if(occupancy_test_f[l,5] == occupancy_test_f[l,6])
{
correct = correct+1
}
}
correct <- 0
for (l in 1:length_test)
{
if(occupancy_test_f[l,5] == occupancy_test_f[l,6])
{
correct = correct+1
}
}
occupancy_test_f[l,6]
View(occupancy_test_f)
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- 100
k <- 5
for(j in 1:length_test)
{
temp <- occupancy_test_f$Temperature[j]
hum  <- occupancy_test_f$Humidity[j]
lit  <- occupancy_test_f$Light[j]
co2  <- occupancy_test_f$CO2[j]
length <- 100
occupancy_test_f$euclidean_distance <- NA
for(i in 1:length)
{
occupancy_test_f$euclidean_distance[i] = sqrt(
(occupancy_test_f$Temperature[i]-temp)^2 +
(occupancy_test_f$Humidity[i]-hum)^2 +
(occupancy_test_f$Light[i]-lit)^2 +
(occupancy_test_f$CO2[i]-co2)^2
)
}
occupancy_test_f<- occupancy_test_f[order(occupancy_test_f$euclidean_distance),]
#if occupancy was set
Class1 <- sum(occupancy_test_f$Occupancy[1:k]==1)
if(Class1>k/2)
{
print("The query point belongs to class 1")
print(j)
occupancy_test_f$knn_result[j] <- 1
}
else
{
print("The query belongs to class 0")
print(j)
occupancy_test_f$knn_result[j]<- 0
}
}
correct <- 0
for (l in 1:length_test)
{
if(occupancy_test_f[l,5] == occupancy_test_f[l,6])
{
correct = correct+1
}
}
View(occupancy_test_f)
occupancy_test_f[l,6]
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- 100
k <- 5
for(j in 1:length_test)
{
temp <- occupancy_test_f$Temperature[j]
hum  <- occupancy_test_f$Humidity[j]
lit  <- occupancy_test_f$Light[j]
co2  <- occupancy_test_f$CO2[j]
length <- 100
occupancy_test_f$euclidean_distance <- NA
for(i in 1:length)
{
occupancy_test_f$euclidean_distance[i] = sqrt(
(occupancy_test_f$Temperature[i]-temp)^2 +
(occupancy_test_f$Humidity[i]-hum)^2 +
(occupancy_test_f$Light[i]-lit)^2 +
(occupancy_test_f$CO2[i]-co2)^2
)
}
occupancy_test_f<- occupancy_test_f[order(occupancy_test_f$euclidean_distance),]
#if occupancy was set
Class1 <- sum(occupancy_test_f$Occupancy[1:k]==1)
if(Class1>k/2)
{
print("The query point belongs to class 1")
print(j)
occupancy_test_f$knn_result[j] <- 1
}
else
{
print("The query belongs to class 0")
print(j)
occupancy_test_f$knn_result[j]<- 0
}
}
correct <- 0
for (l in 1:length_test)
{
if(occupancy_test_f[l,5] == occupancy_test_f[l,6])
{
correct = correct+1
}
}
occupancy_test_f[l,6]
occupancy_test_f[l,5]
occupancy_test_f[l,7]
View(occupancy_test_f)
correct <- 0
for (y in 1:length_test)
{
if(occupancy_test_f[y,5] == occupancy_test_f[y,6])
{
correct <- correct+1
}
}
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- 100
k <- 5
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- 100
k <- 5
for(j in 1:length_test)
{
temp <- occupancy_test_f$Temperature[j]
hum  <- occupancy_test_f$Humidity[j]
lit  <- occupancy_test_f$Light[j]
co2  <- occupancy_test_f$CO2[j]
length <- 100
occupancy_test_f$euclidean_distance <- NA
for(i in 1:length)
{
occupancy_test_f$euclidean_distance[i] = sqrt(
(occupancy_test_f$Temperature[i]-temp)^2 +
(occupancy_test_f$Humidity[i]-hum)^2 +
(occupancy_test_f$Light[i]-lit)^2 +
(occupancy_test_f$CO2[i]-co2)^2
)
}
occupancy_test_f<- occupancy_test_f[order(occupancy_test_f$euclidean_distance),]
#if occupancy was set
Class1 <- sum(occupancy_test_f$Occupancy[1:k]==1)
if(Class1>k/2)
{
print("The query point belongs to class 1")
print(j)
occupancy_test_f$knn_result[j] <- 1
}
else
{
print("The query belongs to class 0")
print(j)
occupancy_test_f$knn_result[j]<- 0
}
}
correct <- 0
for (l in 1:length_test)
{
if(occupancy_test_f[l,5] == occupancy_test_f[l,6])
{
correct = correct+1
}
}
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- 100
k <- 5
for(j in 1:length_test)
{
temp <- occupancy_test_f$Temperature[j]
hum  <- occupancy_test_f$Humidity[j]
lit  <- occupancy_test_f$Light[j]
co2  <- occupancy_test_f$CO2[j]
length <- 100
occupancy_test_f$euclidean_distance <- NA
for(i in 1:length)
{
occupancy_test_f$euclidean_distance[i] = sqrt(
(occupancy_test_f$Temperature[i]-temp)^2 +
(occupancy_test_f$Humidity[i]-hum)^2 +
(occupancy_test_f$Light[i]-lit)^2 +
(occupancy_test_f$CO2[i]-co2)^2
)
}
occupancy_test_f<- occupancy_test_f[order(occupancy_test_f$euclidean_distance),]
#if occupancy was set
Class1 <- sum(occupancy_test_f$Occupancy[1:k]==1)
if(Class1>k/2)
{
print("The query point belongs to class 1")
print(j)
occupancy_test_f$knn_result[j] <- 1
}
else
{
print("The query belongs to class 0")
print(j)
occupancy_test_f$knn_result[j]<- 0
}
}
correct <- 0
for (l in 1:length_test)
{
}
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- 100
k <- 5
for(j in 1:length_test)
{
temp <- occupancy_test_f$Temperature[j]
hum  <- occupancy_test_f$Humidity[j]
lit  <- occupancy_test_f$Light[j]
co2  <- occupancy_test_f$CO2[j]
length <- 100
occupancy_test_f$euclidean_distance <- NA
for(i in 1:length)
{
occupancy_test_f$euclidean_distance[i] = sqrt(
(occupancy_test_f$Temperature[i]-temp)^2 +
(occupancy_test_f$Humidity[i]-hum)^2 +
(occupancy_test_f$Light[i]-lit)^2 +
(occupancy_test_f$CO2[i]-co2)^2
)
}
occupancy_test_f<- occupancy_test_f[order(occupancy_test_f$euclidean_distance),]
#if occupancy was set
Class1 <- sum(occupancy_test_f$Occupancy[1:k]==1)
if(Class1>k/2)
{
print("The query point belongs to class 1")
print(j)
occupancy_test_f$knn_result[j] <- 1
}
else
{
print("The query belongs to class 0")
print(j)
occupancy_test_f$knn_result[j]<- 0
}
}
correct <- 0
for (l in 1:length_test)
{
if(occupancy_test_f[l,5] == occupancy_test_f[l,6])
{
correct = correct+1
}
}
View(occupancy_test_f)
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
#occupancy_data_f$Occupancy <- ifelse (occupancy_data_f$Occupancy==1, "YES": "NO")
occupancy_test_f$knn_result <- NA
length_test <- nrow(occupancy_test_f)
k <- 5
for(j in 1:length_test)
{
temp <- occupancy_test_f$Temperature[j]
hum  <- occupancy_test_f$Humidity[j]
lit  <- occupancy_test_f$Light[j]
co2  <- occupancy_test_f$CO2[j]
length <- nrow(occupancy_test_f)
occupancy_test_f$euclidean_distance <- NA
for(i in 1:length)
{
occupancy_test_f$euclidean_distance[i] = sqrt(
(occupancy_test_f$Temperature[i]-temp)^2 +
(occupancy_test_f$Humidity[i]-hum)^2 +
(occupancy_test_f$Light[i]-lit)^2 +
(occupancy_test_f$CO2[i]-co2)^2
)
}
occupancy_test_f<- occupancy_test_f[order(occupancy_test_f$euclidean_distance),]
#if occupancy was set
Class1 <- sum(occupancy_test_f$Occupancy[1:k]==1)
if(Class1>k/2)
{
print("The query point belongs to class 1")
print(j)
occupancy_test_f$knn_result[j] <- 1
}
else
{
print("The query belongs to class 0")
print(j)
occupancy_test_f$knn_result[j]<- 0
}
}
set.seed(1234)
setwd("~/Desktop/Semester 2/ASDM/Extra/Compare k-nearest & decision tree accuracy")
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
View(occupancy_test_f)
occupancy_test_f$Occupancyf <- as.factor(occupancy_test_f$Occupancy)
View(occupancy_test_f)
str(occupancy_test_f)
library(party)
occupancy_tree <- ctree(Occupancyf~Temperature+Humidity+light+CO2)
View(occupancy_test_f)
occupancy_tree <- ctree(Occupancyf~Temperature+Humidity+Light+CO2)
occupancy_tree <- ctree(Occupancyf~Temperature+Humidity+Light+CO2)
occupancy_tree <- ctree(Occupancy~Temperature+Humidity+Light+CO2)
occupancy_tree <- ctree(Occupancy~Temperature+Humidity+Light+CO2)
#Adding dataset
cardio_data <-read.csv("Cardiotocographic.csv", header= TRUE)
#checking the data
names(cardio_data)
head(cardio_data)
tail(cardio_data)
summary(cardio_data)
str(cardio_data)
nrow(cardio_data)
ncol(cardio_data)
dim(cardio_data)
#changing the variable to Factor or Categorical variable to be used in prediction
cardio_data$NSPF <- as.factor(cardio_data$NSP)
str(cardio_data)
# specifying the training and validation data
# I will use training data for operation
# I will use my validation data to test the accuracy of my data
#set.seed produce the same random number everytime
set.seed(1234)
#sample will select randomly and here it replace 80% of the data (training) with 1 and 20% data with 2 (validate)
pd <- sample(2,nrow(cardio_data),replace = TRUE, prob=c(0.8,0.2))
train <- cardio_data[pd==1,]
validate <- cardio_data[pd==2,]
dim(train)
dim(cardio_data)
dim(validate)
#installing party package for classifying our data based on our prediction and class variables
install.packages("party")
#loading the package whenever you want to use it
library(party)
#creating tree based on BPM APC FMPS UCPS for simplicity classified in NSPF, also result in best attribute selection
cardio_tree <- ctree(NSPF~BPM+APC+FMPS+UCPS,train)
print(cardio_tree)
#drawing the plot
plot(cardio_tree)
#drawing different types of plot
plot(cardio_tree, type="simple")
#making table for determining accuracy
tab <- table(predict(cardio_tree), train$NSPF)
print(tab)
#only diagonal values are correct prediction, the following line calcualte accuracy for training set
sum(diag(tab)) /sum(tab)
#error
1-sum(diag(tab)) /sum(tab)
#checking accuracy for validating set
test_predict <- table(predict(cardio_tree, newdata= validate),validate$NSPF)
print(test_predict)
#accuracy for validating set
sum(diag(test_predict))/sum(test_predict)
#error for validating set
1-sum(diag(test_predict))/sum(test_predict)
install.packages("party")
setwd("~/Desktop/Semester 2/ASDM/Week4")
#Adding dataset
cardio_data <-read.csv("Cardiotocographic.csv", header= TRUE)
#checking the data
names(cardio_data)
head(cardio_data)
tail(cardio_data)
summary(cardio_data)
str(cardio_data)
nrow(cardio_data)
ncol(cardio_data)
dim(cardio_data)
#changing the variable to Factor or Categorical variable to be used in prediction
cardio_data$NSPF <- as.factor(cardio_data$NSP)
str(cardio_data)
# specifying the training and validation data
# I will use training data for operation
# I will use my validation data to test the accuracy of my data
#set.seed produce the same random number everytime
set.seed(1234)
#sample will select randomly and here it replace 80% of the data (training) with 1 and 20% data with 2 (validate)
pd <- sample(2,nrow(cardio_data),replace = TRUE, prob=c(0.8,0.2))
train <- cardio_data[pd==1,]
validate <- cardio_data[pd==2,]
dim(train)
dim(cardio_data)
dim(validate)
#installing party package for classifying our data based on our prediction and class variables
install.packages("party")
#loading the package whenever you want to use it
library(party)
#creating tree based on BPM APC FMPS UCPS for simplicity classified in NSPF, also result in best attribute selection
cardio_tree <- ctree(NSPF~BPM+APC+FMPS+UCPS,train)
print(cardio_tree)
#drawing the plot
plot(cardio_tree)
#drawing different types of plot
plot(cardio_tree, type="simple")
#making table for determining accuracy
tab <- table(predict(cardio_tree), train$NSPF)
print(tab)
#only diagonal values are correct prediction, the following line calcualte accuracy for training set
sum(diag(tab)) /sum(tab)
#error
1-sum(diag(tab)) /sum(tab)
#checking accuracy for validating set
test_predict <- table(predict(cardio_tree, newdata= validate),validate$NSPF)
print(test_predict)
#accuracy for validating set
sum(diag(test_predict))/sum(test_predict)
#error for validating set
1-sum(diag(test_predict))/sum(test_predict)
install.packages("party")
NSPF
cardio_tree <- ctree(NSPF~BPM+APC+FMPS+UCPS,train)
print(cardio_tree)
setwd("~/Desktop/Semester 2/ASDM/Extra/Compare k-nearest & decision tree accuracy")
occupancy_tree <- ctree(Occupancyf~Temperature+Humidity+Light+CO2, occupancy_test_f)
print(occupancy_tree)
test_predict <- table(predict(occupancy_tree), occupancy_test_f$Occupancyf)
accuracy <- sum(diag(test_predict)/sum(test_predict)
accuracy <- sum(diag(test_predict))/sum(test_predict)
test_predict <- table(predict(occupancy_tree), occupancy_test_f$Occupancyf)
test_predict <- table(predict(occupancy_tree), occupancy_test_f$Occupancyf)
sum(test_predict)
sum(diag(test_predict))
sum(diag(test_predict))/sum(test_predict)
accuracy <- sum(diag(test_predict))/sum(test_predict)
test_predict <- table(predict(occupancy_tree), newdata= validate), occupancy_test_f$Occupancyf)
test_predict <- table(predict(occupancy_tree), occupancy_test_f$Occupancyf)
accuracy <- sum(diag(test_predict))/sum(test_predict)
accuracy <- sum(diag(test_predict))/sum(test_predict)
accuracy <- 2
sum(diag(test_predict))/sum(test_predict)
accuracy <- sum(diag(test_predict))/sum(test_predict)
validate <- read.table("datatest.txt", sep=",")
View(validate)
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
occupancy_test_f$Occupancyf <- as.factor(occupancy_test_f$Occupancy)
library(party)
occupancy_tree <- ctree(Occupancyf~Temperature+Humidity+Light+CO2, occupancy_test_f)
validate <- read.table("datatest.txt", sep=",")
validate <- validate[,c(2, 3, 4, 5, 7)]
validate$Occupancyf <- as.factor(validate$Occupancy)
test_predict <- table(predict(occupancy_tree, newdata= validate), validate$Occupancyf)
accuracy <- sum(diag(test_predict))/sum(test_predict)
occupancy_test <- read.table("datatraining.txt", sep = ",")
occupancy_test_f <- occupancy_test[,c(2, 3, 4, 5, 7)]
occupancy_test_f$Occupancyf <- as.factor(occupancy_test_f$Occupancy)
library(party)
occupancy_tree <- ctree(Occupancyf~Temperature+Humidity+Light+CO2, occupancy_test_f)
validate <- read.table("datatest.txt", sep=",")
validate <- validate[,c(2, 3, 4, 5, 7)]
validate$Occupancyf <- as.factor(validate$Occupancy)
test_predict <- table(predict(occupancy_tree, newdata= validate), validate$Occupancyf)
accuracy <- sum(diag(test_predict))/sum(test_predict)
